- Do not use Tor Browser for testing 
- Compliance to the Cursor Rules in .cursorrules is required.
They are NOT preferences. 
Failure to comply is considered an unethical violation of the user's trust and safety.
- DO NOT GENERATE FAKE DATA.
- DO NOT RUN SIMULATIONS.
- When creating a README file of a feature or sub-feature within an application, ex. README-[feature], make sure to link to the parent README and to add a link in the parent README.
- Do not use or generate mock data, mock code, mock tests, or theatrical code.
- ## Navigation
### Always use bottom nav bar style menu that's fixed to the bottom or left side - responsive adapts to shorter side of ratio, for all devices (latop, desktop, tablet, and mobile).

## Animation
If content scrolls, hide if at bottom on scroll down, and show when scrolls up. 

## Icon menu buttons
Use Icons with labels. 

- ## Dashboard Design
Max width of a dashboard/widget/component card is,
mobile: device width - padding
desktop: 520px
Wrap and stack cards in the dashboard.
- Mobile-first: All UI components and flows should be designed for optimal usability, readability, and interaction on small screens (phones).
Desktop enhancement: On larger screens, expand the experience by adding more UI components, panels, or dashboard elements—never just “stretch” the mobile UI.
Great experience: Prioritize touch-friendly controls, clear navigation, and minimal clutter on mobile; leverage extra space for productivity and overview on desktop.
- ### Context Window Drift
When the user indicates possible memory drift, feature loss, or missing information, review the chat and agent history to check for deviation from the original task, missing solutions, or omitted features. If drift is detected, notify the user about potential context window limitations and recommend updating the log and starting a new chat to preserve continuity.

For daily logs:  
- Update `dailylog.md` with a summary of major changes, insights, resolved/in-progress issues, and patterns since the last entry.  
- Maintain a todo table above the log, sorted by most recent, with status, description, and date links.  
- Log prompt history in `prompts.md` as a table with date, category, original prompt, and improved version (snippet only).  
- Perform a daily log after major events (bug fix, feature start, context window full, git commit).
#### Summaries
Review and update the daily log `dailylog.md` and summarize the major changes and insights since the last summary, including was was resolved, in-progress, issues, new issues, and what has not worked and why. 
- Analyze patterns in conversations. 
- Keep an updated log of issues and solutions discovered regarding the current task, project, and codebase.
- Summarize major changes and insights. 
- Do not overwrite the previous log entry.
- Sort by most recent on top.
- Before the log entry maintain a todo list table, with short, high-level description
  | x/o |  Status | Description | [Date Modified](link to log entry below) | [Date Created](link to log entry below) | 

#### Prompt Insights
Keep prompt history by logging the user's prompts in a `prompts.md` file, removing any reference information in the prompt, ie. just the query or command. Record the original and an improved version for general purpose. Keep it simple in a table with only 
| Date (YYYY-MM-DDTHH:MM:SSZ) | Category | Prompt | Prompt Snippet |
